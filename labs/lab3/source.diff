diff --git a/hw/rtl/VX_config.vh b/hw/rtl/VX_config.vh
index c349f36..4cef7ca 100644
--- a/hw/rtl/VX_config.vh
+++ b/hw/rtl/VX_config.vh
@@ -416,6 +416,11 @@
 `endif
 `endif
 
+// DOT8 instruction
+`ifndef LATENCY_DOT8
+`define LATENCY_DOT8 2
+`endif
+
 // Floating-Point Units ///////////////////////////////////////////////////////
 
 // Size of FPU Request Queue
diff --git a/hw/rtl/VX_define.vh b/hw/rtl/VX_define.vh
index 4ccb008..af72e87 100644
--- a/hw/rtl/VX_define.vh
+++ b/hw/rtl/VX_define.vh
@@ -156,12 +156,15 @@
 `define INST_ALU_XOR         4'b1110
 `define INST_ALU_SLL         4'b1111
 
+//DOT8 instruction
+`define INST_ALU_DOT8        4'b0001 // Unused Function code for DOT8
 
 `define ALU_TYPE_BITS        2
 `define ALU_TYPE_ARITH       0
 `define ALU_TYPE_BRANCH      1
 `define ALU_TYPE_MULDIV      2
 `define ALU_TYPE_OTHER       3
+`define ALU_TYPE_DOT8        3
 
 `define INST_ALU_BITS        4
 `define INST_ALU_CLASS(op)   op[3:2]
diff --git a/hw/rtl/core/VX_alu_dot8.sv b/hw/rtl/core/VX_alu_dot8.sv
new file mode 100644
index 0000000..b1cb0e9
--- /dev/null
+++ b/hw/rtl/core/VX_alu_dot8.sv
@@ -0,0 +1,111 @@
+`include "VX_define.vh"
+
+module VX_alu_dot8 #(
+parameter `STRING INSTANCE_ID = "",
+parameter NUM_LANES = 1
+) (
+input wire          clk,
+input wire          reset,
+
+// Inputs
+VX_execute_if.slave execute_if,
+
+// Outputs
+VX_commit_if.master commit_if
+);
+localparam PID_BITS = `CLOG2(`NUM_THREADS / NUM_LANES);
+localparam PID_WIDTH = `UP(PID_BITS);     
+localparam TAG_WIDTH = `UUID_WIDTH + `NW_WIDTH + NUM_LANES + `PC_BITS + `NR_BITS + 1 + PID_WIDTH + 1 + 1;     
+localparam LATENCY_DOT8 = `LATENCY_DOT8;
+localparam PE_RATIO = 2;
+localparam NUM_PES = `UP(NUM_LANES / PE_RATIO);
+
+`UNUSED_SPARAM (INSTANCE_ID)
+`UNUSED_VAR (execute_if.data.op_type)
+`UNUSED_VAR (execute_if.data.op_args)
+`UNUSED_VAR (execute_if.data.tid)
+`UNUSED_VAR (execute_if.data.rs3_data)
+
+wire [NUM_LANES-1:0][2*`XLEN-1:0] data_in;
+
+for (genvar i = 0; i < NUM_LANES; ++i) begin : gen_data_in
+    assign data_in[i][0 +: `XLEN] = execute_if.data.rs1_data[i];
+    assign data_in[i][`XLEN +: `XLEN] = execute_if.data.rs2_data[i];
+end
+
+wire pe_enable;
+wire [NUM_PES-1:0][`XLEN-1:0] pe_data_out;
+wire [NUM_PES-1:0][2*`XLEN-1:0] pe_data_in;
+
+// PEs time-multiplexing
+VX_pe_serializer #(
+    .NUM_LANES  (NUM_LANES),
+    .NUM_PES    (NUM_PES),
+    .LATENCY    (LATENCY_DOT8),
+    .DATA_IN_WIDTH (2*`XLEN),
+    .DATA_OUT_WIDTH (`XLEN),
+    .TAG_WIDTH  (TAG_WIDTH),
+    .PE_REG     (1)
+) pe_serializer (
+    .clk        (clk),
+    .reset      (reset),
+    .valid_in   (execute_if.valid),
+    .data_in    (data_in),
+    .tag_in     ({
+        execute_if.data.uuid,
+        execute_if.data.wid,
+        execute_if.data.tmask,
+        execute_if.data.PC,
+        execute_if.data.rd,
+        execute_if.data.wb,
+        execute_if.data.pid,
+        execute_if.data.sop,
+        execute_if.data.eop
+    }),
+    .ready_in   (execute_if.ready),
+    .pe_enable  (pe_enable),
+    .pe_data_in (pe_data_out),
+    .pe_data_out(pe_data_in),
+    .valid_out  (commit_if.valid),
+    .data_out   (commit_if.data.data),
+    .tag_out    ({
+        commit_if.data.uuid,
+        commit_if.data.wid,
+        commit_if.data.tmask,
+        commit_if.data.PC,
+        commit_if.data.rd,
+        commit_if.data.wb,
+        commit_if.data.pid,
+        commit_if.data.sop,
+        commit_if.data.eop
+    }),
+    .ready_out  (commit_if.ready)
+);
+
+// PEs instancing
+for (genvar i = 0; i < NUM_PES; ++i) begin : gen_pe_instance
+    // wire [`XLEN-1:0] a = pe_data_in[i][0 +: `XLEN];
+    // wire [`XLEN-1:0] b = pe_data_in[i][`XLEN+: `XLEN];
+    wire [31:0] a = pe_data_in[i][0 +: 32];
+    wire [31:0] b = pe_data_in[i][32+: 32];
+    wire [`XLEN-1:0] c;
+    
+    // TODO: evaluate and assign the value of c
+    wire signed [7:0] A1 = a[7:0];
+    wire signed [7:0] A2 = a[15:8];
+    wire signed [7:0] A3 = a[23:16];
+    wire signed [7:0] A4 = a[31:24];
+
+    wire signed [7:0] B1 = b[7:0];
+    wire signed [7:0] B2 = b[15:8];
+    wire signed [7:0] B3 = b[23:16];
+    wire signed [7:0] B4 = b[31:24];
+
+    assign c = (A1 * B1) + (A2 * B2) + (A3 * B3) + (A4 * B4);
+
+
+    wire [`XLEN-1:0] result;
+    `BUFFER_EX(result, c, pe_enable, LATENCY_DOT8);
+    assign pe_data_out[i] = result;
+end
+endmodule
diff --git a/hw/rtl/core/VX_alu_unit.sv b/hw/rtl/core/VX_alu_unit.sv
index 951cd81..74458ba 100644
--- a/hw/rtl/core/VX_alu_unit.sv
+++ b/hw/rtl/core/VX_alu_unit.sv
@@ -35,6 +35,7 @@ module VX_alu_unit #(
     localparam PE_SEL_BITS  = `CLOG2(PE_COUNT);
     localparam PE_IDX_INT   = 0;
     localparam PE_IDX_MDV   = PE_IDX_INT + `EXT_M_ENABLED;
+    localparam PE_IDX_DOT8  = PE_IDX_MDV + 1;  // New index for DOT8 ALU
 
     VX_execute_if #(
         .NUM_LANES (NUM_LANES)
@@ -111,6 +112,17 @@ module VX_alu_unit #(
             .commit_if  (pe_commit_if[PE_IDX_MDV])
         );
     `endif
+
+        VX_alu_dot8 #(
+            .INSTANCE_ID ($sformatf("%s-dot8%0d", INSTANCE_ID, block_idx)),
+            .NUM_LANES (NUM_LANES)
+        ) alu_dot8 (
+            .clk        (clk),
+            .reset      (reset),
+            .execute_if (pe_execute_if[PE_IDX_DOT8]),
+            .commit_if  (pe_commit_if[PE_IDX_DOT8])
+        );
+
     end
 
     VX_gather_unit #(
diff --git a/hw/rtl/core/VX_decode.sv b/hw/rtl/core/VX_decode.sv
index 70bb181..2af9c21 100644
--- a/hw/rtl/core/VX_decode.sv
+++ b/hw/rtl/core/VX_decode.sv
@@ -529,6 +529,25 @@ module VX_decode import VX_gpu_pkg::*; #(
                             default:;
                         endcase
                     end
+                    7'h01: begin
+                        ex_type = `EX_ALU;
+                        case (func3)
+                            3'h0: begin // DOT8
+                                op_type = `INST_OP_BITS'(`INST_ALU_DOT8);
+                                op_args.alu.xtype = `ALU_TYPE_DOT8;
+                                op_args.alu.is_w = 0;
+                                op_args.alu.use_PC = 0;
+                                op_args.alu.use_imm = 0; 
+                                use_rd = 1;
+                                use_rs1 = 1;
+                                use_rs2 = 1;
+                                `USED_IREG (rd);
+                                `USED_IREG (rs1);
+                                `USED_IREG (rs2);
+                            end
+                            default:;
+                        endcase
+                    end
                     default:;
                 endcase
             end
diff --git a/kernel/include/vx_intrinsics.h b/kernel/include/vx_intrinsics.h
index 5d16d44..7a5d78c 100644
--- a/kernel/include/vx_intrinsics.h
+++ b/kernel/include/vx_intrinsics.h
@@ -130,6 +130,13 @@ inline void vx_wspawn(int num_warps, vx_wspawn_pfn func_ptr) {
     __asm__ volatile (".insn r %0, 1, 0, x0, %1, %2" :: "i"(RISCV_CUSTOM0), "r"(num_warps), "r"(func_ptr));
 }
 
+// Dot Product (4x4 int8 elements)
+inline int vx_dot8(int a, int b) {
+    int result;
+    __asm__ volatile (".insn r %1, 0, 1, %0, %2, %3" : "=r"(result) : "i"(RISCV_CUSTOM0), "r"(a), "r"(b));
+    return result;
+}
+
 // Split on a predicate
 inline int vx_split(int predicate) {
     int ret;
diff --git a/sim/simx/decode.cpp b/sim/simx/decode.cpp
index 7a37e79..bb59c65 100644
--- a/sim/simx/decode.cpp
+++ b/sim/simx/decode.cpp
@@ -403,6 +403,12 @@ static const char* op_string(const Instr &instr) {
       default:
         std::abort();
       }
+    case 1:
+      switch (func3) {
+        case 0: return "DOT8";
+        default:
+          std::abort();
+      }
     default:
       std::abort();
     }
@@ -543,6 +549,16 @@ std::shared_ptr<Instr> Emulator::decode(uint32_t code) const {
           std::abort();
         }
         break;
+      case 1:
+        if (func3 == 0) {
+          instr->setDestReg(rd, RegType::Integer);
+          instr->addSrcReg(rs1, RegType::Integer);
+          instr->addSrcReg(rs2, RegType::Integer);
+          // printf("DOT8 instruction decoded\n");
+          break;
+        } else {
+          std::abort();
+        }
       default:
         std::abort();
       }
diff --git a/sim/simx/execute.cpp b/sim/simx/execute.cpp
index dd82535..ebe0456 100644
--- a/sim/simx/execute.cpp
+++ b/sim/simx/execute.cpp
@@ -1417,6 +1417,39 @@ void Emulator::execute(const Instr &instr, uint32_t wid, instr_trace_t *trace) {
         std::abort();
       }
     } break;
+    case 1: {
+      switch (func3) {
+        case 0: {
+          // DOT8
+          trace->fu_type = FUType::ALU;
+          trace->alu_type = AluType::DOT8;
+          trace->src_regs[0] = {RegType::Integer, rsrc0};
+          trace->src_regs[1] = {RegType::Integer, rsrc1};
+
+          for (uint32_t t = thread_start; t < num_threads; ++t) {
+            if (!warp.tmask.test(t))
+              continue;
+
+            int8_t A1 = rsdata[t][0].u & 0xFF;
+            int8_t A2 = (rsdata[t][0].u >> 8) & 0xFF;
+            int8_t A3 = (rsdata[t][0].u >> 16) & 0xFF;
+            int8_t A4 = (rsdata[t][0].u >> 24) & 0xFF;
+
+            int8_t B1 = rsdata[t][1].u & 0xFF;
+            int8_t B2 = (rsdata[t][1].u >> 8) & 0xFF;
+            int8_t B3 = (rsdata[t][1].u >> 16) & 0xFF;
+            int8_t B4 = (rsdata[t][1].u >> 24) & 0xFF;
+
+            int32_t dot_product = (A1*B1) + (A2*B2) + (A3*B3) + (A4*B4);
+
+            rddata[t].i = dot_product;
+          }
+          rd_write = true;          
+        } break;
+        default:
+        std::abort();
+      }
+    } break;
     default:
       std::abort();
     }
diff --git a/sim/simx/func_unit.cpp b/sim/simx/func_unit.cpp
index a182f6d..0809047 100644
--- a/sim/simx/func_unit.cpp
+++ b/sim/simx/func_unit.cpp
@@ -47,6 +47,9 @@ void AluUnit::tick() {
 		case AluType::IDIV:
 			output.push(trace, XLEN+delay);
 			break;
+		case AluType::DOT8:
+			output.push(trace, 2+delay);
+			break;
 		default:
 			std::abort();
 		}
diff --git a/sim/simx/types.h b/sim/simx/types.h
index 77b3511..e3d5d8e 100644
--- a/sim/simx/types.h
+++ b/sim/simx/types.h
@@ -127,7 +127,8 @@ enum class AluType {
   BRANCH,
   SYSCALL,
   IMUL,
-  IDIV
+  IDIV,
+  DOT8
 };
 
 inline std::ostream &operator<<(std::ostream &os, const AluType& type) {
diff --git a/tests/regression/dot8/kernel.cpp b/tests/regression/dot8/kernel.cpp
new file mode 100644
index 0000000..38c790e
--- /dev/null
+++ b/tests/regression/dot8/kernel.cpp
@@ -0,0 +1,30 @@
+#include <vx_spawn.h>
+#include <vx_print.h>
+#include "common.h"
+
+void kernel_body(kernel_arg_t* __UNIFORM__ arg) {
+    auto A = reinterpret_cast<int8_t*>(arg->A_addr);
+	auto B = reinterpret_cast<int8_t*>(arg->B_addr);
+	auto C = reinterpret_cast<int32_t*>(arg->C_addr);
+    auto size = arg->size;
+
+    int col = blockIdx.x;
+    int row = blockIdx.y;
+
+    int32_t sum = 0;
+    for (int e=0; e < size; e+=4) {
+        int32_t A_pack = *reinterpret_cast<int32_t*>(&A[row * size + e]);
+        int32_t B_pack = *reinterpret_cast<int32_t*>(&B[e * size + col]);
+
+        int32_t dot_product = vx_dot8(A_pack, B_pack);
+        sum += dot_product;
+    }
+
+
+    C[row * size + col] = sum;
+}
+
+int main() {
+	kernel_arg_t* arg = (kernel_arg_t*)csr_read(VX_CSR_MSCRATCH);
+	return vx_spawn_threads(2, arg->grid_dim, nullptr, (vx_kernel_func_cb)kernel_body, arg);
+}
diff --git a/tests/regression/dot8/main.cpp b/tests/regression/dot8/main.cpp
new file mode 100644
index 0000000..18ad25d
--- /dev/null
+++ b/tests/regression/dot8/main.cpp
@@ -0,0 +1,263 @@
+#include <iostream>
+#include <unistd.h>
+#include <string.h>
+#include <vector>
+#include <chrono>
+#include <vortex.h>
+#include <cmath>
+#include "common.h"
+// #include <vx_intrinsics.h>
+
+#define FLOAT_ULP 6
+
+#define RT_CHECK(_expr)                                         \
+   do {                                                         \
+     int _ret = _expr;                                          \
+     if (0 == _ret)                                             \
+       break;                                                   \
+     printf("Error: '%s' returned %d!\n", #_expr, (int)_ret);   \
+	 cleanup();			                                              \
+     exit(-1);                                                  \
+   } while (false)
+
+///////////////////////////////////////////////////////////////////////////////
+
+template <typename Type>
+class Comparator {};
+
+template <>
+class Comparator<int32_t> {
+public:
+  static const char* type_str() {
+    return "integer";
+  }
+  static int32_t generate() {
+    return static_cast<int32_t>(rand() % 128);
+  }
+  static bool compare(int32_t a, int32_t b, int index, int errors) {
+    if (a != b) {
+      if (errors < 100) {
+        printf("*** error: [%d] expected=%d, actual=%d\n", index, b, a);
+      }
+      return false;
+    }
+    return true;
+  }
+};
+
+template <>
+class Comparator<float> {
+public:
+  static const char* type_str() {
+    return "float";
+  }
+  static int generate() {
+    return static_cast<float>(rand()) / RAND_MAX;
+  }
+  static bool compare(float a, float b, int index, int errors) {
+    union fi_t { float f; int32_t i; };
+    fi_t fa, fb;
+    fa.f = a;
+    fb.f = b;
+    auto d = std::abs(fa.i - fb.i);
+    if (d > FLOAT_ULP) {
+      if (errors < 100) {
+        printf("*** error: [%d] expected=%f, actual=%f\n", index, b, a);
+      }
+      return false;
+    }
+    return true;
+  }
+};
+
+static void matmul_cpu(int32_t* out, const int8_t* A, const int8_t* B, uint32_t width, uint32_t height) {
+  for (uint32_t row = 0; row < height; ++row) {
+    for (uint32_t col = 0; col < width; ++col) {
+      int32_t sum = 0;
+      for (uint32_t e = 0; e < width; e += 4) {
+        // Pack 4 consecutive int8_t elements from A and B
+        int32_t A_pack = *(reinterpret_cast<const int32_t*>(&A[row * width + e]));
+        int32_t B_pack = *(reinterpret_cast<const int32_t*>(&B[e * width + col]));
+        
+        // Perform dot product of 4 int8_t elements
+        int8_t A1 = A_pack & 0xFF;
+        int8_t A2 = (A_pack >> 8) & 0xFF;
+        int8_t A3 = (A_pack >> 16) & 0xFF;
+        int8_t A4 = (A_pack >> 24) & 0xFF;
+
+        int8_t B1 = B_pack & 0xFF;
+        int8_t B2 = (B_pack >> 8) & 0xFF;
+        int8_t B3 = (B_pack >> 16) & 0xFF;
+        int8_t B4 = (B_pack >> 24) & 0xFF;
+
+        int32_t dot_product = (A1 * B1) + (A2 * B2) + (A3 * B3) + (A4 * B4);
+        sum += dot_product;
+
+      }
+      out[row * width + col] = sum;
+    }
+  }
+}
+
+const char* kernel_file = "kernel.vxbin";
+uint32_t size = 32;
+
+vx_device_h device = nullptr;
+vx_buffer_h A_buffer = nullptr;
+vx_buffer_h B_buffer = nullptr;
+vx_buffer_h C_buffer = nullptr;
+vx_buffer_h krnl_buffer = nullptr;
+vx_buffer_h args_buffer = nullptr;
+kernel_arg_t kernel_arg = {};
+
+static void show_usage() {
+   std::cout << "Vortex Test." << std::endl;
+   std::cout << "Usage: [-k: kernel] [-n size] [-h: help]" << std::endl;
+}
+
+static void parse_args(int argc, char **argv) {
+  int c;
+  while ((c = getopt(argc, argv, "n:k:h")) != -1) {
+    switch (c) {
+    case 'n':
+      size = atoi(optarg);
+      break;
+    case 'k':
+      kernel_file = optarg;
+      break;
+    case 'h':
+      show_usage();
+      exit(0);
+      break;
+    default:
+      show_usage();
+      exit(-1);
+    }
+  }
+}
+
+void cleanup() {
+  if (device) {
+    vx_mem_free(A_buffer);
+    vx_mem_free(B_buffer);
+    vx_mem_free(C_buffer);
+    vx_mem_free(krnl_buffer);
+    vx_mem_free(args_buffer);
+    vx_dev_close(device);
+  }
+}
+
+int main(int argc, char *argv[]) {
+  // parse command arguments
+  parse_args(argc, argv);
+
+  std::srand(50);
+
+  // open device connection
+  std::cout << "open device connection" << std::endl;
+  RT_CHECK(vx_dev_open(&device));
+
+  uint32_t size_sq = size * size;
+  uint32_t buf_size = size_sq * sizeof(TYPE);
+
+  std::cout << "data type: " << Comparator<TYPE>::type_str() << std::endl;
+  std::cout << "matrix size: " << size << "x" << size << std::endl;
+
+  kernel_arg.grid_dim[0] = size;
+  kernel_arg.grid_dim[1] = size;
+  kernel_arg.size = size;
+
+  // allocate device memory
+  std::cout << "allocate device memory" << std::endl;
+  RT_CHECK(vx_mem_alloc(device, buf_size, VX_MEM_READ, &A_buffer));
+  RT_CHECK(vx_mem_address(A_buffer, &kernel_arg.A_addr));
+  RT_CHECK(vx_mem_alloc(device, buf_size, VX_MEM_READ, &B_buffer));
+  RT_CHECK(vx_mem_address(B_buffer, &kernel_arg.B_addr));
+  RT_CHECK(vx_mem_alloc(device, buf_size, VX_MEM_WRITE, &C_buffer));
+  RT_CHECK(vx_mem_address(C_buffer, &kernel_arg.C_addr));
+
+  std::cout << "A_addr=0x" << std::hex << kernel_arg.A_addr << std::endl;
+  std::cout << "B_addr=0x" << std::hex << kernel_arg.B_addr << std::endl;
+  std::cout << "C_addr=0x" << std::hex << kernel_arg.C_addr << std::endl;
+
+  // generate source data
+  // std::vector<TYPE> h_A(size_sq);
+  // std::vector<TYPE> h_B(size_sq);
+  // std::vector<TYPE> h_C(size_sq);
+  std::vector<int8_t> h_A(size_sq);
+  std::vector<int8_t> h_B(size_sq);
+  std::vector<int32_t> h_C(size_sq);
+  for (uint32_t i = 0; i < size_sq; ++i) {
+    // h_A[i] = Comparator<TYPE>::generate();
+    // h_B[i] = Comparator<TYPE>::generate();
+    h_A[i] = rand() % 128;
+    h_B[i] = rand() % 128;
+  }
+
+  // upload matrix A buffer
+  {
+    std::cout << "upload matrix A buffer" << std::endl;
+    RT_CHECK(vx_copy_to_dev(A_buffer, h_A.data(), 0, buf_size));
+  }
+
+  // upload matrix B buffer
+  {
+    std::cout << "upload matrix B buffer" << std::endl;
+    RT_CHECK(vx_copy_to_dev(B_buffer, h_B.data(), 0, buf_size));
+  }
+
+  // upload program
+  std::cout << "upload program" << std::endl;
+  RT_CHECK(vx_upload_kernel_file(device, kernel_file, &krnl_buffer));
+
+  // upload kernel argument
+  std::cout << "upload kernel argument" << std::endl;
+  RT_CHECK(vx_upload_bytes(device, &kernel_arg, sizeof(kernel_arg_t), &args_buffer));
+
+  auto time_start = std::chrono::high_resolution_clock::now();
+
+  // start device
+  std::cout << "start device" << std::endl;
+  RT_CHECK(vx_start(device, krnl_buffer, args_buffer));
+
+  // wait for completion
+  std::cout << "wait for completion" << std::endl;
+  RT_CHECK(vx_ready_wait(device, VX_MAX_TIMEOUT));
+
+  auto time_end = std::chrono::high_resolution_clock::now();
+  double elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(time_end - time_start).count();
+  printf("Elapsed time: %lg ms\n", elapsed);
+
+  // download destination buffer
+  std::cout << "download destination buffer" << std::endl;
+  RT_CHECK(vx_copy_from_dev(h_C.data(), C_buffer, 0, buf_size));
+
+  // verify result
+  std::cout << "verify result" << std::endl;
+  int errors = 0;
+  {
+    // std::vector<TYPE> h_ref(size_sq);
+    std::vector<int32_t> h_ref(size_sq);
+    matmul_cpu(h_ref.data(), h_A.data(), h_B.data(), size, size);
+
+    for (uint32_t i = 0; i < h_ref.size(); ++i) {
+      if (!Comparator<int32_t>::compare(h_C[i], h_ref[i], i, errors)) {
+        ++errors;
+      }
+    }
+  }
+
+  // cleanup
+  std::cout << "cleanup" << std::endl;
+  cleanup();
+
+  if (errors != 0) {
+    std::cout << "Found " << std::dec << errors << " errors!" << std::endl;
+    std::cout << "FAILED!" << std::endl;
+    return errors;
+  }
+
+  std::cout << "PASSED!" << std::endl;
+
+  return 0;
+}
\ No newline at end of file
