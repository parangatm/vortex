diff --git a/kernel/include/vx_intrinsics.h b/kernel/include/vx_intrinsics.h
index 5d16d44..b172404 100644
--- a/kernel/include/vx_intrinsics.h
+++ b/kernel/include/vx_intrinsics.h
@@ -96,6 +96,11 @@ extern "C" {
         __asm__ __volatile__ ("csrc %0, %1"	:: "i" (csr), "r" (__v) : "memory"); \
 })
 
+// Prefetch instruction
+inline void vx_prefetch(int addr) {
+    __asm__ volatile (".insn r %0, 0, 1, x0, %1, x0" :: "i"(RISCV_CUSTOM0), "r"(addr));
+}
+
 // Set thread mask
 inline void vx_tmc(int thread_mask) {
     __asm__ volatile (".insn r %0, 0, 0, x0, %1, x0" :: "i"(RISCV_CUSTOM0), "r"(thread_mask));
diff --git a/sim/simx/cache_sim.cpp b/sim/simx/cache_sim.cpp
index 27a73ba..d3d873a 100644
--- a/sim/simx/cache_sim.cpp
+++ b/sim/simx/cache_sim.cpp
@@ -157,6 +157,7 @@ struct bank_req_t {
 	uint64_t uuid;
 	ReqType  type;
 	bool     write;
+	bool     prefetch;
 
 	bank_req_t(uint32_t num_ports)
 		: ports(num_ports)
@@ -532,6 +533,7 @@ public:
 				bank_req.uuid  = core_req.uuid;
 				bank_req.type  = bank_req_t::Core;
 				bank_req.write = core_req.write;
+				bank_req.prefetch = core_req.prefetch;
 				pipeline_req   = bank_req;
 				DT(3, simobject_->name() << " core-req: " << core_req);
 			}
@@ -548,6 +550,8 @@ public:
 
 		// process active request
 		this->processBankRequests();
+		DT(3, simobject_->name() << " prefetch_requests " << perf_stats_.prefetch_requests);
+		DT(3, simobject_->name() << " prefetch_hits " << perf_stats_.prefetch_hits);
 	}
 
 	const PerfStats& perf_stats() const {
@@ -599,7 +603,7 @@ private:
 			} break;
 			case bank_req_t::Replay: {
 				// send core response
-				if (!pipeline_req.write || config_.write_reponse) {
+				if (!pipeline_req.prefetch && (!pipeline_req.write || config_.write_reponse)) {
 					for (auto& info : pipeline_req.ports) {
 						if (!info.valid)
 							continue;
@@ -636,6 +640,16 @@ private:
 					}
 				}
 
+				// prefetch counter
+				if (pipeline_req.prefetch) {
+            	    ++perf_stats_.prefetch_requests;
+                	if (hit_line_id != -1) {
+                    	++perf_stats_.prefetch_hits;
+                	} else {
+                    	++perf_stats_.prefetch_misses;
+                	}
+            	}
+
 				if (hit_line_id != -1) {
 					// Hit handling
 					if (pipeline_req.write) {
@@ -656,7 +670,7 @@ private:
 						}
 					}
 					// send core response
-					if (!pipeline_req.write || config_.write_reponse) {
+					if (!pipeline_req.prefetch && (!pipeline_req.write || config_.write_reponse)) {
 						for (auto& info : pipeline_req.ports) {
 							if (!info.valid)
 								continue;
@@ -679,6 +693,7 @@ private:
 							MemReq mem_req;
 							mem_req.addr  = params_.mem_addr(bank_id, pipeline_req.set_id, repl_line.tag);
 							mem_req.write = true;
+							mem_req.prefetch = false;
 							mem_req.cid   = pipeline_req.cid;
 							mem_req_ports_.at(bank_id).push(mem_req, 1);
 							DT(3, simobject_->name() << "-bank" << bank_id << " writeback: " << mem_req);
@@ -692,6 +707,7 @@ private:
 							MemReq mem_req;
 							mem_req.addr  = params_.mem_addr(bank_id, pipeline_req.set_id, pipeline_req.tag);
 							mem_req.write = true;
+							mem_req.prefetch = false;
 							mem_req.cid   = pipeline_req.cid;
 							mem_req.uuid  = pipeline_req.uuid;
 							mem_req_ports_.at(bank_id).push(mem_req, 1);
@@ -720,9 +736,11 @@ private:
 							MemReq mem_req;
 							mem_req.addr  = params_.mem_addr(bank_id, pipeline_req.set_id, pipeline_req.tag);
 							mem_req.write = false;
+							mem_req.prefetch = false;
 							mem_req.tag   = mshr_id;
 							mem_req.cid   = pipeline_req.cid;
 							mem_req.uuid  = pipeline_req.uuid;
+							mem_req.prefetch = pipeline_req.prefetch;
 							mem_req_ports_.at(bank_id).push(mem_req, 1);
 							DT(3, simobject_->name() << "-bank" << bank_id << " fill: " << mem_req);
 							++pending_fill_reqs_;
diff --git a/sim/simx/cache_sim.h b/sim/simx/cache_sim.h
index aad4895..e546b5a 100644
--- a/sim/simx/cache_sim.h
+++ b/sim/simx/cache_sim.h
@@ -46,6 +46,9 @@ public:
 		uint64_t bank_stalls;
 		uint64_t mshr_stalls;
 		uint64_t mem_latency;
+		uint64_t prefetch_requests;
+    	uint64_t prefetch_hits;
+    	uint64_t prefetch_misses;
 
 		PerfStats()
 			: reads(0)
@@ -57,6 +60,9 @@ public:
 			, bank_stalls(0)
 			, mshr_stalls(0)
 			, mem_latency(0)
+			, prefetch_requests(0)
+			, prefetch_hits(0)
+			, prefetch_misses(0)
 		{}
 
 		PerfStats& operator+=(const PerfStats& rhs) {
@@ -69,6 +75,9 @@ public:
 			this->bank_stalls += rhs.bank_stalls;
 			this->mshr_stalls += rhs.mshr_stalls;
 			this->mem_latency += rhs.mem_latency;
+			this->prefetch_requests += rhs.prefetch_requests;
+        	this->prefetch_hits += rhs.prefetch_hits;
+        	this->prefetch_misses += rhs.prefetch_misses;
 			return *this;
 		}
 	};
diff --git a/sim/simx/core.cpp b/sim/simx/core.cpp
index 537230a..7032f84 100644
--- a/sim/simx/core.cpp
+++ b/sim/simx/core.cpp
@@ -230,6 +230,7 @@ void Core::fetch() {
   MemReq mem_req;
   mem_req.addr  = trace->PC;
   mem_req.write = false;
+  mem_req.prefetch = false;
   mem_req.tag   = pending_icache_.allocate(trace);
   mem_req.cid   = trace->cid;
   mem_req.uuid  = trace->uuid;
diff --git a/sim/simx/decode.cpp b/sim/simx/decode.cpp
index 7a37e79..d1fac36 100644
--- a/sim/simx/decode.cpp
+++ b/sim/simx/decode.cpp
@@ -403,6 +403,10 @@ static const char* op_string(const Instr &instr) {
       default:
         std::abort();
       }
+    case 1:
+      if (func3 == 0) { // Prefetch
+        return "PREFETCH";
+      }
     default:
       std::abort();
     }
@@ -543,6 +547,12 @@ std::shared_ptr<Instr> Emulator::decode(uint32_t code) const {
           std::abort();
         }
         break;
+      case 1:
+        if (func3 == 0) { // Prefetch
+          instr->addSrcReg(rs1, RegType::Integer);
+          break;
+        }
+        break;
       default:
         std::abort();
       }
diff --git a/sim/simx/execute.cpp b/sim/simx/execute.cpp
index dd82535..0978938 100644
--- a/sim/simx/execute.cpp
+++ b/sim/simx/execute.cpp
@@ -1417,6 +1417,22 @@ void Emulator::execute(const Instr &instr, uint32_t wid, instr_trace_t *trace) {
         std::abort();
       }
     } break;
+    case 1: {
+      if (func3 == 0) { // PREFETCH
+        trace->fu_type = FUType::LSU;
+        trace->lsu_type = LsuType::PREFETCH;
+
+        auto trace_data = std::make_shared<LsuTraceData>(num_threads);
+        trace->data = trace_data;
+
+        for (uint32_t t = 0; t < num_threads; ++t) {
+          if (!warp.tmask.test(t))
+            continue;
+          uint32_t base_addr = rsdata[t][0].i;
+          trace_data->mem_addrs.at(t) = {base_addr, 0};
+        }
+      } break;
+    } break;
     default:
       std::abort();
     }
diff --git a/sim/simx/func_unit.cpp b/sim/simx/func_unit.cpp
index a182f6d..b8ecc45 100644
--- a/sim/simx/func_unit.cpp
+++ b/sim/simx/func_unit.cpp
@@ -166,10 +166,11 @@ void LsuUnit::tick() {
 			continue;
 		}
 
+		bool is_prefetch = (trace->lsu_type == LsuType::PREFETCH); // Identify PREFETCH
 		bool is_write = ((trace->lsu_type == LsuType::STORE) || (trace->lsu_type == LsuType::TCU_STORE));
 
 		// check pending queue capacity
-		if (!is_write && state.pending_rd_reqs.full()) {
+		if (!is_write && !is_prefetch && state.pending_rd_reqs.full()) {
 			if (!trace->log_once(true)) {
 				DT(4, "*** " << this->name() << " queue-full: " << *trace);
 			}
@@ -181,6 +182,7 @@ void LsuUnit::tick() {
 		// build memory request
 		LsuReq lsu_req(NUM_LSU_LANES);
 		lsu_req.write = is_write;
+		lsu_req.prefetch = is_prefetch;
 		{
 			auto trace_data = std::dynamic_pointer_cast<LsuTraceData>(trace->data);
 			auto t0 = trace->pid * NUM_LSU_LANES;
@@ -193,7 +195,7 @@ void LsuUnit::tick() {
 		}
 		uint32_t tag = 0;
 
-		if (!is_write) {
+		if (!is_write && !is_prefetch) {
 			tag = state.pending_rd_reqs.allocate({trace, lsu_req.mask});
 		}
 		lsu_req.tag  = tag;
@@ -214,13 +216,14 @@ void LsuUnit::tick() {
 		}
 
 		// do not wait on writes
-		if (is_write) {
+		if (is_write || is_prefetch) {
 			Outputs.at(iw).push(trace, 1);
 		}
 
 		// remove input
 		input.pop();
 	}
+
 }
 /*  TO BE FIXED:Tensor_core code
     send_request is not used anymore. Need to be modified number of load
diff --git a/sim/simx/mem_coalescer.cpp b/sim/simx/mem_coalescer.cpp
index 8af5679..0974bc6 100644
--- a/sim/simx/mem_coalescer.cpp
+++ b/sim/simx/mem_coalescer.cpp
@@ -129,7 +129,7 @@ void MemCoalescer::tick() {
   assert(!out_mask.none());
 
   uint32_t tag = 0;
-  if (!in_req.write) {
+  if (!in_req.write && !in_req.prefetch) {
     // allocate a response tag for read requests
     tag = pending_rd_reqs_.allocate(pending_req_t{in_req.tag, cur_mask});
   }
@@ -139,6 +139,7 @@ void MemCoalescer::tick() {
   out_req.mask = out_mask;
   out_req.tag = tag;
   out_req.write = in_req.write;
+  out_req.prefetch = in_req.prefetch;
   out_req.addrs = out_addrs;
   out_req.cid = in_req.cid;
   out_req.uuid = in_req.uuid;
diff --git a/sim/simx/types.cpp b/sim/simx/types.cpp
index 3e6c596..e2df154 100644
--- a/sim/simx/types.cpp
+++ b/sim/simx/types.cpp
@@ -52,6 +52,7 @@ void LocalMemDemux::tick() {
 
     LsuReq out_dc_req(in_req.mask.size());
     out_dc_req.write = in_req.write;
+    out_dc_req.prefetch = in_req.prefetch;
     out_dc_req.tag   = in_req.tag;
     out_dc_req.cid   = in_req.cid;
     out_dc_req.uuid  = in_req.uuid;
@@ -147,6 +148,7 @@ void LsuMemAdapter::tick() {
         // build memory request
         MemReq out_req;
         out_req.write = in_req.write;
+        out_req.prefetch = in_req.prefetch;
         out_req.addr  = in_req.addrs.at(i);
         out_req.type  = get_addr_type(in_req.addrs.at(i));
         out_req.tag   = in_req.tag;
diff --git a/sim/simx/types.h b/sim/simx/types.h
index 77b3511..4c3ee89 100644
--- a/sim/simx/types.h
+++ b/sim/simx/types.h
@@ -149,7 +149,8 @@ enum class LsuType {
   TCU_LOAD,
   STORE,
   TCU_STORE,
-  FENCE
+  FENCE,
+  PREFETCH
 };
 
 enum class TCUType {
@@ -171,6 +172,7 @@ inline std::ostream &operator<<(std::ostream &os, const LsuType& type) {
   case LsuType::STORE: os << "STORE"; break;
   case LsuType::TCU_STORE: os << "TCU_STORE"; break;
   case LsuType::FENCE: os << "FENCE"; break;
+  case LsuType::PREFETCH: os << "PREFETCH"; break;
   default: assert(false);
   }
   return os;
@@ -285,6 +287,7 @@ struct LsuReq {
   BitVector<> mask;
   std::vector<uint64_t> addrs;
   bool     write;
+  bool     prefetch;
   uint32_t tag;
   uint32_t cid;
   uint64_t uuid;
@@ -293,6 +296,7 @@ struct LsuReq {
     : mask(size)
     , addrs(size, 0)
     , write(false)
+    , prefetch(false)
     , tag(0)
     , cid(0)
     , uuid(0)
@@ -343,6 +347,7 @@ inline std::ostream &operator<<(std::ostream &os, const LsuRsp& rsp) {
 struct MemReq {
   uint64_t addr;
   bool     write;
+  bool     prefetch;
   AddrType type;
   uint32_t tag;
   uint32_t cid;
@@ -350,12 +355,14 @@ struct MemReq {
 
   MemReq(uint64_t _addr = 0,
           bool _write = false,
+          bool _prefetch = false,
           AddrType _type = AddrType::Global,
           uint64_t _tag = 0,
           uint32_t _cid = 0,
           uint64_t _uuid = 0
   ) : addr(_addr)
     , write(_write)
+    , prefetch(_prefetch)
     , type(_type)
     , tag(_tag)
     , cid(_cid)
diff --git a/tests/regression/mstress/kernel.cpp b/tests/regression/prefetch/kernel.cpp
new file mode 100644
index 0000000..e6f54c4
--- a/tests/regression/mstress/kernel.cpp
+++ b/tests/regression/prefetch/kernel.cpp
@@ -14,6 +14,8 @@ void kernel_body(kernel_arg_t* __UNIFORM__ arg) {
 		for (uint32_t j = 0; j < NUM_LOADS; ++j) {
 			uint32_t addr  = offset + i + j;
 			uint32_t index = addr_ptr[addr];
+			uint32_t next_index = addr_ptr[addr+1];
+			vx_prefetch((uint64_t)&src_ptr[next_index]);
 			value *= src_ptr[index];
 		}
 		dst_ptr[offset+i] = value;